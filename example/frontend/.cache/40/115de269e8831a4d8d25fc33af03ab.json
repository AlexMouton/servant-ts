{"id":"LhN6","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operator/mergeAll.js.map","includedInParent":true,"mtime":1544898207315},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/package.json","includedInParent":true,"mtime":1544898207315},{"name":"../operators/mergeAll","loc":{"line":2,"column":25},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operator/mergeAll.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/mergeAll.js"}],"generated":{"js":"\"use strict\";var e=require(\"../operators/mergeAll\");function r(r){return void 0===r&&(r=Number.POSITIVE_INFINITY),e.mergeAll(r)(this)}exports.mergeAll=r;","map":{"mappings":[{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":17}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":3,"column":40},"generated":{"line":1,"column":27}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":0},"generated":{"line":1,"column":52}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":0},"generated":{"line":1,"column":61}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":49},"generated":{"line":1,"column":63}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":53,"column":2},"generated":{"line":1,"column":66}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":49},"generated":{"line":1,"column":78}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":49},"generated":{"line":1,"column":82}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":49},"generated":{"line":1,"column":86}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":70},"generated":{"line":1,"column":88}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":77},"generated":{"line":1,"column":95}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":53,"column":9},"generated":{"line":1,"column":114}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":53,"column":9},"generated":{"line":1,"column":116}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":53,"column":21},"generated":{"line":1,"column":125}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":53,"column":9},"generated":{"line":1,"column":127}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":53,"column":33},"generated":{"line":1,"column":128}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":16},"generated":{"line":1,"column":134}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":16},"generated":{"line":1,"column":142}},{"source":"../../src/operator/mergeAll.ts","name":null,"original":{"line":52,"column":24},"generated":{"line":1,"column":151}}],"sources":{"../../src/operator/mergeAll.ts":"import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n"},"lineCount":null}},"hash":"34702327cdff456bc0c15a6c604cd282","cacheData":{"env":{}}}