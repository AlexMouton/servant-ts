{"id":"1Jg7","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/concatAll.js.map","includedInParent":true,"mtime":1544898207315},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/package.json","includedInParent":true,"mtime":1544898207315},{"name":"./mergeAll","loc":{"line":2,"column":25},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/concatAll.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/mergeAll.js"}],"generated":{"js":"\"use strict\";var e=require(\"./mergeAll\");function r(){return e.mergeAll(1)}exports.concatAll=r;","map":{"mappings":[{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":17}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":2,"column":25},"generated":{"line":1,"column":27}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":53,"column":0},"generated":{"line":1,"column":41}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":53,"column":0},"generated":{"line":1,"column":50}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":54,"column":2},"generated":{"line":1,"column":54}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":1,"column":61}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":1,"column":63}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":54,"column":18},"generated":{"line":1,"column":72}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":53,"column":16},"generated":{"line":1,"column":75}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":53,"column":16},"generated":{"line":1,"column":83}},{"source":"../../src/operators/concatAll.ts","name":null,"original":{"line":53,"column":25},"generated":{"line":1,"column":93}}],"sources":{"../../src/operators/concatAll.ts":"\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n"},"lineCount":null}},"hash":"13047d64d4861a4de99848e2d1c0a06e","cacheData":{"env":{}}}