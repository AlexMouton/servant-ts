{"id":"uXRX","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/mergeAll.js.map","includedInParent":true,"mtime":1544898207315},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/package.json","includedInParent":true,"mtime":1544898207315},{"name":"./mergeMap","loc":{"line":2,"column":25},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/mergeAll.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/mergeMap.js"},{"name":"../util/identity","loc":{"line":3,"column":25},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/mergeAll.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/util/identity.js"}],"generated":{"js":"\"use strict\";var e=require(\"./mergeMap\"),r=require(\"../util/identity\");function i(i){return void 0===i&&(i=Number.POSITIVE_INFINITY),e.mergeMap(r.identity,null,i)}exports.mergeAll=i;","map":{"mappings":[{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":17}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":3,"column":25},"generated":{"line":1,"column":27}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":41}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":43}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":4,"column":25},"generated":{"line":1,"column":51}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":1,"column":71}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":1,"column":80}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":28},"generated":{"line":1,"column":82}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":1,"column":85}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":28},"generated":{"line":1,"column":97}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":28},"generated":{"line":1,"column":101}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":28},"generated":{"line":1,"column":105}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":49},"generated":{"line":1,"column":107}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":56},"generated":{"line":1,"column":114}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":52,"column":9},"generated":{"line":1,"column":133}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":52,"column":9},"generated":{"line":1,"column":135}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":52,"column":18},"generated":{"line":1,"column":144}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":52,"column":18},"generated":{"line":1,"column":146}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":52,"column":80},"generated":{"line":1,"column":155}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":52,"column":86},"generated":{"line":1,"column":160}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":1,"column":163}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":1,"column":171}},{"source":"../../src/operators/mergeAll.ts","name":null,"original":{"line":51,"column":24},"generated":{"line":1,"column":180}}],"sources":{"../../src/operators/mergeAll.ts":"\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}"},"lineCount":null}},"hash":"6e3e6151f879e943773e276a4e837159","cacheData":{"env":{}}}