{"id":"xLKc","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operator/distinctUntilChanged.js.map","includedInParent":true,"mtime":1544898207315},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/package.json","includedInParent":true,"mtime":1544898207315},{"name":"../operators/distinctUntilChanged","loc":{"line":2,"column":37},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operator/distinctUntilChanged.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/distinctUntilChanged.js"}],"generated":{"js":"\"use strict\";var t=require(\"../operators/distinctUntilChanged\");function i(i,n){return t.distinctUntilChanged(i,n)(this)}exports.distinctUntilChanged=i;","map":{"mappings":[{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":17}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":3,"column":52},"generated":{"line":1,"column":27}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":1,"column":64}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":1,"column":73}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":49,"column":64},"generated":{"line":1,"column":75}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":49,"column":99},"generated":{"line":1,"column":77}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":50,"column":2},"generated":{"line":1,"column":80}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":1,"column":87}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":1,"column":89}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":50,"column":21},"generated":{"line":1,"column":110}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":50,"column":30},"generated":{"line":1,"column":112}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":1,"column":114}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":50,"column":43},"generated":{"line":1,"column":115}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":49,"column":16},"generated":{"line":1,"column":121}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":49,"column":16},"generated":{"line":1,"column":129}},{"source":"../../src/operator/distinctUntilChanged.ts","name":null,"original":{"line":49,"column":36},"generated":{"line":1,"column":150}}],"sources":{"../../src/operator/distinctUntilChanged.ts":"\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n"},"lineCount":null}},"hash":"ad1952328ebca2b1bd8d76c2d54a2785","cacheData":{"env":{}}}