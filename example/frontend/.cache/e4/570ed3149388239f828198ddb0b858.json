{"id":"server/api.tsx","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/tsconfig.json","includedInParent":true,"mtime":1545600954227},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.getApiLiteral = function () {\n  return \"data User = \\n  User\\n    {name    :: Text\\n    ,age     :: Int\\n    ,isAdmin :: Bool\\n    ,hasMI   :: Maybe Text\\n    } deriving (Generic, TypescriptType)\\n\\ntype SimpleAPI =\\n       \\\"user\\\" :> Get '[JSON] [User]\\n  :<|> \\\"user\\\" :> Capture \\\"userId\\\" Int :> Get '[JSON] User\\n  \";\n};\n\nexports.getTSTypes = function () {\n  return \"interface User {\\n    name : string\\n    age : number\\n    isAdmin : boolean\\n    hasMI : Option<string>\\n}\\n  \";\n};\n\nexports.getTSFunctions = function () {\n  return \"function getUser(): Promise<Array<User>> {\\n  return fetch(withRemoteBaseUrl(`user`))\\n}\\n\\nfunction getUserByUserId(userId : number): Promise<User> {\\n  return fetch(withRemoteBaseUrl(`user/${userId}`))\\n}\\n  \";\n};","map":{"mappings":[{"source":"server/api.tsx","name":null,"original":{"line":1,"column":13},"generated":{"line":7,"column":0}},{"source":"server/api.tsx","name":null,"original":{"line":1,"column":13},"generated":{"line":7,"column":7}},{"source":"server/api.tsx","name":null,"original":{"line":1,"column":13},"generated":{"line":7,"column":8}},{"source":"server/api.tsx","name":null,"original":{"line":1,"column":13},"generated":{"line":7,"column":21}},{"source":"server/api.tsx","name":null,"original":{"line":1,"column":29},"generated":{"line":7,"column":24}},{"source":"server/api.tsx","name":null,"original":{"line":1,"column":29},"generated":{"line":8,"column":0}},{"source":"server/api.tsx","name":null,"original":{"line":1,"column":29},"generated":{"line":9,"column":0}},{"source":"server/api.tsx","name":null,"original":{"line":1,"column":13},"generated":{"line":9,"column":1}},{"source":"server/api.tsx","name":null,"original":{"line":17,"column":13},"generated":{"line":11,"column":0}},{"source":"server/api.tsx","name":null,"original":{"line":17,"column":13},"generated":{"line":11,"column":7}},{"source":"server/api.tsx","name":null,"original":{"line":17,"column":13},"generated":{"line":11,"column":8}},{"source":"server/api.tsx","name":null,"original":{"line":17,"column":13},"generated":{"line":11,"column":18}},{"source":"server/api.tsx","name":null,"original":{"line":17,"column":26},"generated":{"line":11,"column":21}},{"source":"server/api.tsx","name":null,"original":{"line":17,"column":26},"generated":{"line":12,"column":0}},{"source":"server/api.tsx","name":null,"original":{"line":17,"column":26},"generated":{"line":13,"column":0}},{"source":"server/api.tsx","name":null,"original":{"line":17,"column":13},"generated":{"line":13,"column":1}},{"source":"server/api.tsx","name":null,"original":{"line":28,"column":13},"generated":{"line":15,"column":0}},{"source":"server/api.tsx","name":null,"original":{"line":28,"column":13},"generated":{"line":15,"column":7}},{"source":"server/api.tsx","name":null,"original":{"line":28,"column":13},"generated":{"line":15,"column":8}},{"source":"server/api.tsx","name":null,"original":{"line":28,"column":13},"generated":{"line":15,"column":22}},{"source":"server/api.tsx","name":null,"original":{"line":28,"column":30},"generated":{"line":15,"column":25}},{"source":"server/api.tsx","name":null,"original":{"line":28,"column":30},"generated":{"line":16,"column":0}},{"source":"server/api.tsx","name":null,"original":{"line":28,"column":30},"generated":{"line":17,"column":0}},{"source":"server/api.tsx","name":null,"original":{"line":28,"column":13},"generated":{"line":17,"column":1}}],"sources":{"server/api.tsx":"export const getApiLiteral = (): string => (\n  `data User = \n  User\n    {name    :: Text\n    ,age     :: Int\n    ,isAdmin :: Bool\n    ,hasMI   :: Maybe Text\n    } deriving (Generic, TypescriptType)\n\ntype SimpleAPI =\n       \"user\" :> Get '[JSON] [User]\n  :<|> \"user\" :> Capture \"userId\" Int :> Get '[JSON] User\n  `\n)\n\n\nexport const getTSTypes = (): string => (\n  `interface User {\n    name : string\n    age : number\n    isAdmin : boolean\n    hasMI : Option<string>\n}\n  `\n)\n\n\nexport const getTSFunctions = (): string => (\n  `function getUser(): Promise<Array<User>> {\n  return fetch(withRemoteBaseUrl(\\`user\\`))\n}\n\nfunction getUserByUserId(userId : number): Promise<User> {\n  return fetch(withRemoteBaseUrl(\\`user/\\${userId}\\`))\n}\n  `\n)\n"},"lineCount":null}},"hash":"3d94379d3307f931c27966be36f81fee","cacheData":{"env":{}}}