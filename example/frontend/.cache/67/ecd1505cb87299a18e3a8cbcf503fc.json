{"id":"ngPQ","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/merge.js.map","includedInParent":true,"mtime":1544898207315},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/package.json","includedInParent":true,"mtime":1544898207315},{"name":"../Observable","loc":{"line":2,"column":27},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/merge.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/Observable.js"},{"name":"./ArrayObservable","loc":{"line":3,"column":32},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/merge.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/ArrayObservable.js"},{"name":"../util/isScheduler","loc":{"line":4,"column":28},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/merge.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/util/isScheduler.js"},{"name":"../operators/mergeAll","loc":{"line":5,"column":25},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/merge.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/mergeAll.js"}],"generated":{"js":"\"use strict\";var e=require(\"../Observable\"),r=require(\"./ArrayObservable\"),l=require(\"../util/isScheduler\"),n=require(\"../operators/mergeAll\");function t(){for(var t=[],u=0;u<arguments.length;u++)t[u-0]=arguments[u];var a=Number.POSITIVE_INFINITY,b=null,o=t[t.length-1];return l.isScheduler(o)?(b=t.pop(),t.length>1&&\"number\"==typeof t[t.length-1]&&(a=t.pop())):\"number\"==typeof o&&(a=t.pop()),null===b&&1===t.length&&t[0]instanceof e.Observable?t[0]:n.mergeAll(a)(new r.ArrayObservable(t,b))}exports.merge=t;","map":{"mappings":[{"source":"../../src/observable/merge.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":17}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":1,"column":44},"generated":{"line":1,"column":27}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":44}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":46}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":3,"column":32},"generated":{"line":1,"column":54}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":75}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":77}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":4,"column":28},"generated":{"line":1,"column":85}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":108}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":110}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":5,"column":25},"generated":{"line":1,"column":118}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":0},"generated":{"line":1,"column":143}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":0},"generated":{"line":1,"column":152}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":160}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":164}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":166}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":169}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":171}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":173}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":175}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":185}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":192}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":196}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":198}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":200}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":203}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":28},"generated":{"line":1,"column":213}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":216}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":84,"column":5},"generated":{"line":1,"column":220}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":84,"column":18},"generated":{"line":1,"column":222}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":84,"column":25},"generated":{"line":1,"column":229}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":85,"column":5},"generated":{"line":1,"column":247}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":85,"column":29},"generated":{"line":1,"column":249}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":86,"column":6},"generated":{"line":1,"column":254}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":86,"column":18},"generated":{"line":1,"column":256}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":86,"column":30},"generated":{"line":1,"column":258}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":86,"column":42},"generated":{"line":1,"column":260}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":86,"column":51},"generated":{"line":1,"column":267}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":2},"generated":{"line":1,"column":270}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":87,"column":6},"generated":{"line":1,"column":277}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":87,"column":6},"generated":{"line":1,"column":279}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":87,"column":18},"generated":{"line":1,"column":291}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":88,"column":4},"generated":{"line":1,"column":295}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":88,"column":28},"generated":{"line":1,"column":297}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":88,"column":40},"generated":{"line":1,"column":299}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":89,"column":8},"generated":{"line":1,"column":305}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":89,"column":20},"generated":{"line":1,"column":307}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":89,"column":29},"generated":{"line":1,"column":314}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":89,"column":81},"generated":{"line":1,"column":317}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":89,"column":41},"generated":{"line":1,"column":334}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":89,"column":53},"generated":{"line":1,"column":336}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":89,"column":65},"generated":{"line":1,"column":338}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":89,"column":74},"generated":{"line":1,"column":345}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":90,"column":6},"generated":{"line":1,"column":350}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":90,"column":27},"generated":{"line":1,"column":352}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":90,"column":39},"generated":{"line":1,"column":354}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":92,"column":29},"generated":{"line":1,"column":362}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":92,"column":20},"generated":{"line":1,"column":379}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":93,"column":4},"generated":{"line":1,"column":383}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":93,"column":25},"generated":{"line":1,"column":385}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":93,"column":37},"generated":{"line":1,"column":387}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":20},"generated":{"line":1,"column":394}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":1,"column":401}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":51},"generated":{"line":1,"column":404}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":28},"generated":{"line":1,"column":408}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":40},"generated":{"line":1,"column":410}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":56},"generated":{"line":1,"column":418}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":68},"generated":{"line":1,"column":420}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":82},"generated":{"line":1,"column":433}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":96,"column":82},"generated":{"line":1,"column":435}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":97,"column":26},"generated":{"line":1,"column":446}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":97,"column":38},"generated":{"line":1,"column":448}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":100,"column":9},"generated":{"line":1,"column":451}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":100,"column":9},"generated":{"line":1,"column":453}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":100,"column":18},"generated":{"line":1,"column":462}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":100,"column":9},"generated":{"line":1,"column":464}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":100,"column":30},"generated":{"line":1,"column":465}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":100,"column":34},"generated":{"line":1,"column":469}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":100,"column":34},"generated":{"line":1,"column":471}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":100,"column":55},"generated":{"line":1,"column":487}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":100,"column":68},"generated":{"line":1,"column":489}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":16},"generated":{"line":1,"column":493}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":16},"generated":{"line":1,"column":501}},{"source":"../../src/observable/merge.ts","name":null,"original":{"line":83,"column":21},"generated":{"line":1,"column":507}}],"sources":{"../../src/observable/merge.ts":"import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n"},"lineCount":null}},"hash":"69c44bfddb0f0ce5b0199cf731566636","cacheData":{"env":{}}}