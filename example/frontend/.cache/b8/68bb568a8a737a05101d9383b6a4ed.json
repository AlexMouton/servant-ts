{"id":"QdsC","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operator/map.js.map","includedInParent":true,"mtime":1544898207315},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/package.json","includedInParent":true,"mtime":1544898207315},{"name":"../operators/map","loc":{"line":2,"column":20},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operator/map.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/map.js"}],"generated":{"js":"\"use strict\";var r=require(\"../operators/map\");function t(t,e){return r.map(t,e)(this)}exports.map=t;","map":{"mappings":[{"source":"../../src/operator/map.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":17}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":1,"column":38},"generated":{"line":1,"column":27}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":37,"column":0},"generated":{"line":1,"column":47}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":37,"column":0},"generated":{"line":1,"column":56}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":37,"column":47},"generated":{"line":1,"column":58}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":37,"column":88},"generated":{"line":1,"column":60}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":38,"column":2},"generated":{"line":1,"column":63}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":1,"column":70}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":1,"column":72}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":38,"column":24},"generated":{"line":1,"column":76}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":38,"column":33},"generated":{"line":1,"column":78}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":1,"column":80}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":38,"column":42},"generated":{"line":1,"column":81}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":37,"column":16},"generated":{"line":1,"column":87}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":37,"column":16},"generated":{"line":1,"column":95}},{"source":"../../src/operator/map.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":1,"column":99}}],"sources":{"../../src/operator/map.ts":"import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n"},"lineCount":null}},"hash":"b791f77871aec036240f265ead511014","cacheData":{"env":{}}}