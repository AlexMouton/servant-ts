{"id":"sUD3","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/concat.js.map","includedInParent":true,"mtime":1544898207315},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/package.json","includedInParent":true,"mtime":1544898207315},{"name":"../util/isScheduler","loc":{"line":2,"column":28},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/concat.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/util/isScheduler.js"},{"name":"./of","loc":{"line":3,"column":19},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/concat.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/of.js"},{"name":"./from","loc":{"line":4,"column":21},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/concat.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/from.js"},{"name":"../operators/concatAll","loc":{"line":5,"column":26},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/observable/concat.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/concatAll.js"}],"generated":{"js":"\"use strict\";var r=require(\"../util/isScheduler\"),e=require(\"./of\"),o=require(\"./from\"),t=require(\"../operators/concatAll\");function l(){for(var l=[],c=0;c<arguments.length;c++)l[c-0]=arguments[c];return 1===l.length||2===l.length&&r.isScheduler(l[1])?o.from(l[0]):t.concatAll()(e.of.apply(void 0,l))}exports.concat=l;","map":{"mappings":[{"source":"../../src/observable/concat.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":17}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":3,"column":28},"generated":{"line":1,"column":27}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":50}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":52}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":4,"column":19},"generated":{"line":1,"column":60}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":68}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":70}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":5,"column":21},"generated":{"line":1,"column":78}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":88}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":90}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":6,"column":26},"generated":{"line":1,"column":98}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":0},"generated":{"line":1,"column":124}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":0},"generated":{"line":1,"column":133}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":141}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":145}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":147}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":150}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":152}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":154}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":156}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":166}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":173}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":177}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":179}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":181}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":184}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":29},"generated":{"line":1,"column":194}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":2},"generated":{"line":1,"column":197}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":29},"generated":{"line":1,"column":204}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":6},"generated":{"line":1,"column":208}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":18},"generated":{"line":1,"column":210}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":58},"generated":{"line":1,"column":218}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":35},"generated":{"line":1,"column":222}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":47},"generated":{"line":1,"column":224}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":63},"generated":{"line":1,"column":232}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":63},"generated":{"line":1,"column":234}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":75},"generated":{"line":1,"column":246}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":112,"column":87},"generated":{"line":1,"column":248}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":113,"column":11},"generated":{"line":1,"column":252}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":113,"column":11},"generated":{"line":1,"column":254}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":113,"column":21},"generated":{"line":1,"column":259}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":113,"column":33},"generated":{"line":1,"column":261}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":115,"column":9},"generated":{"line":1,"column":265}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":115,"column":9},"generated":{"line":1,"column":267}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":115,"column":9},"generated":{"line":1,"column":278}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":115,"column":21},"generated":{"line":1,"column":279}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":115,"column":21},"generated":{"line":1,"column":281}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":284}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":295}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":115,"column":27},"generated":{"line":1,"column":297}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":16},"generated":{"line":1,"column":301}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":16},"generated":{"line":1,"column":309}},{"source":"../../src/observable/concat.ts","name":null,"original":{"line":111,"column":22},"generated":{"line":1,"column":316}}],"sources":{"../../src/observable/concat.ts":"import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n"},"lineCount":null}},"hash":"af03bbaf8c76562d11366c14a9f15375","cacheData":{"env":{}}}