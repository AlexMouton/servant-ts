{"id":"JIKv","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/share.js.map","includedInParent":true,"mtime":1544898207315},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/package.json","includedInParent":true,"mtime":1544898207315},{"name":"./multicast","loc":{"line":2,"column":26},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/share.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/multicast.js"},{"name":"./refCount","loc":{"line":3,"column":25},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/share.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/refCount.js"},{"name":"../Subject","loc":{"line":4,"column":24},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/share.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/Subject.js"}],"generated":{"js":"\"use strict\";var r=require(\"./multicast\"),e=require(\"./refCount\"),t=require(\"../Subject\");function u(){return new t.Subject}function n(){return function(t){return e.refCount()(r.multicast(u)(t))}}exports.share=n;","map":{"mappings":[{"source":"../../src/operators/share.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":17}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":2,"column":26},"generated":{"line":1,"column":27}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":42}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":44}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":3,"column":25},"generated":{"line":1,"column":52}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":66}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":68}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":4,"column":24},"generated":{"line":1,"column":76}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":90}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":99}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":9,"column":2},"generated":{"line":1,"column":103}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":9,"column":9},"generated":{"line":1,"column":110}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":9,"column":13},"generated":{"line":1,"column":114}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":9,"column":13},"generated":{"line":1,"column":116}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":124}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":133}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":137}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":9},"generated":{"line":1,"column":144}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":1,"column":153}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":36},"generated":{"line":1,"column":156}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":36},"generated":{"line":1,"column":163}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":36},"generated":{"line":1,"column":165}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":36},"generated":{"line":1,"column":175}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":47},"generated":{"line":1,"column":176}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":47},"generated":{"line":1,"column":178}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":57},"generated":{"line":1,"column":188}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":47},"generated":{"line":1,"column":190}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":25,"column":78},"generated":{"line":1,"column":191}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":24,"column":16},"generated":{"line":1,"column":196}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":24,"column":16},"generated":{"line":1,"column":204}},{"source":"../../src/operators/share.ts","name":null,"original":{"line":24,"column":21},"generated":{"line":1,"column":210}}],"sources":{"../../src/operators/share.ts":"import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n"},"lineCount":null}},"hash":"b3c9077d09b6b34747fe644cb415e237","cacheData":{"env":{}}}