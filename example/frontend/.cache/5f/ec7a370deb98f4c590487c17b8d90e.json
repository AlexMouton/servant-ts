{"id":"6/F8","dependencies":[{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operator/share.js.map","includedInParent":true,"mtime":1544898207315},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/package.json","includedInParent":true,"mtime":1545675554786},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/.babelrc","includedInParent":true,"mtime":1545599562417},{"name":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/package.json","includedInParent":true,"mtime":1544898207315},{"name":"../operators/share","loc":{"line":2,"column":22},"parent":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operator/share.js","resolved":"/Users/stevenmaccoun/projects/servant-ts/example/frontend/node_modules/rxjs/operators/share.js"}],"generated":{"js":"\"use strict\";var r=require(\"../operators/share\");function e(){return r.share()(this)}exports.share=e;","map":{"mappings":[{"source":"../../src/operator/share.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":17}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":2,"column":37},"generated":{"line":1,"column":27}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":49}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":58}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":62}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":1,"column":69}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":1,"column":71}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":1,"column":78}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":21,"column":23},"generated":{"line":1,"column":79}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":20,"column":16},"generated":{"line":1,"column":85}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":20,"column":16},"generated":{"line":1,"column":93}},{"source":"../../src/operator/share.ts","name":null,"original":{"line":20,"column":21},"generated":{"line":1,"column":99}}],"sources":{"../../src/operator/share.ts":"import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n"},"lineCount":null}},"hash":"555e137965bb66c1dcdeaf08e9be4dbc","cacheData":{"env":{}}}